// Code generated by MockGen. DO NOT EDIT.
// Source: pkg/machine/client.go

// Package mock is a generated GoMock package.
package mock

import (
	gomock "github.com/golang/mock/gomock"
	os "os"
	reflect "reflect"
)

// MockClient is a mock of Client interface
type MockClient struct {
	ctrl     *gomock.Controller
	recorder *MockClientMockRecorder
}

// MockClientMockRecorder is the mock recorder for MockClient
type MockClientMockRecorder struct {
	mock *MockClient
}

// NewMockClient creates a new mock instance
func NewMockClient(ctrl *gomock.Controller) *MockClient {
	mock := &MockClient{ctrl: ctrl}
	mock.recorder = &MockClientMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockClient) EXPECT() *MockClientMockRecorder {
	return m.recorder
}

// RunCommand mocks base method
func (m *MockClient) RunCommand(cmd string) ([]byte, []byte, error) {
	ret := m.ctrl.Call(m, "RunCommand", cmd)
	ret0, _ := ret[0].([]byte)
	ret1, _ := ret[1].([]byte)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// RunCommand indicates an expected call of RunCommand
func (mr *MockClientMockRecorder) RunCommand(cmd interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RunCommand", reflect.TypeOf((*MockClient)(nil).RunCommand), cmd)
}

// WriteFile mocks base method
func (m *MockClient) WriteFile(path string, mode os.FileMode, b []byte) error {
	ret := m.ctrl.Call(m, "WriteFile", path, mode, b)
	ret0, _ := ret[0].(error)
	return ret0
}

// WriteFile indicates an expected call of WriteFile
func (mr *MockClientMockRecorder) WriteFile(path, mode, b interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "WriteFile", reflect.TypeOf((*MockClient)(nil).WriteFile), path, mode, b)
}

// ReadFile mocks base method
func (m *MockClient) ReadFile(path string) ([]byte, error) {
	ret := m.ctrl.Call(m, "ReadFile", path)
	ret0, _ := ret[0].([]byte)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ReadFile indicates an expected call of ReadFile
func (mr *MockClientMockRecorder) ReadFile(path interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ReadFile", reflect.TypeOf((*MockClient)(nil).ReadFile), path)
}

// MkdirAll mocks base method
func (m *MockClient) MkdirAll(path string, mode os.FileMode) error {
	ret := m.ctrl.Call(m, "MkdirAll", path, mode)
	ret0, _ := ret[0].(error)
	return ret0
}

// MkdirAll indicates an expected call of MkdirAll
func (mr *MockClientMockRecorder) MkdirAll(path, mode interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "MkdirAll", reflect.TypeOf((*MockClient)(nil).MkdirAll), path, mode)
}

// MoveFile mocks base method
func (m *MockClient) MoveFile(srcFilePath, dstFilePath string) error {
	ret := m.ctrl.Call(m, "MoveFile", srcFilePath, dstFilePath)
	ret0, _ := ret[0].(error)
	return ret0
}

// MoveFile indicates an expected call of MoveFile
func (mr *MockClientMockRecorder) MoveFile(srcFilePath, dstFilePath interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "MoveFile", reflect.TypeOf((*MockClient)(nil).MoveFile), srcFilePath, dstFilePath)
}

// CopyFile mocks base method
func (m *MockClient) CopyFile(srcFilePath, dstFilePath string) error {
	ret := m.ctrl.Call(m, "CopyFile", srcFilePath, dstFilePath)
	ret0, _ := ret[0].(error)
	return ret0
}

// CopyFile indicates an expected call of CopyFile
func (mr *MockClientMockRecorder) CopyFile(srcFilePath, dstFilePath interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CopyFile", reflect.TypeOf((*MockClient)(nil).CopyFile), srcFilePath, dstFilePath)
}

// Exists mocks base method
func (m *MockClient) Exists(filePath string) (bool, error) {
	ret := m.ctrl.Call(m, "Exists", filePath)
	ret0, _ := ret[0].(bool)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Exists indicates an expected call of Exists
func (mr *MockClientMockRecorder) Exists(filePath interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Exists", reflect.TypeOf((*MockClient)(nil).Exists), filePath)
}
